cl-scrobbler is a Common Lisp library for scrobbling to last.fm.

It was initially designed to make it trivial to build a last.fm plugin for shuffletron but it should be useful to other hackers interested in scrobblinb via CL, for whatever reason.

Here's what trivial means: https://github.com/redline6561/shuffletron/blob/master/src/scrobbler.lisp

More specifically, the following symbols are exported from cl-scrobbler:
(More complete and better formatted docs will be autogenerated from the source soon...)

** Variables

*config-dir* -> ""
  "The directory to store the session key, scrobble cache and log in."

*song-info-fn* -> nil
  "This is a lambda or named function intended to take no arguments and return
a list where the first element is the track name, the second is the artist and
the third is the track length in seconds."

*song-time-fn* -> nil
  "This is a lambda or named function intended to take no arguments and return
the current position in the track in seconds."

*scrobble-p* -> nil
  "This variable is checked to determine whether the plugin is enabled."

*now-playing-p* -> nil
  "This variable determines whether the user's now playing status is updated."

*scrobble-count* -> 5
  "The number of songs needed in the queue before an attempt to scrobble is
made."

** Symbols

update-last-seek
  "Set *LAST-SEEK* to the current track position via *SONG-TIME-FN*."

update-song-info
  "Set *SONG-INFO* to a list of (track artist duration) via *SONG-INFO-FN*."

update-skipped
  "Set *SKIPPED* to the current track position via *SONG-TIME-FN*."

maybe-queue-scrobble
  "When valid (as determined by VALID-SCROBBLE-P), add a song to the queue to be
scrobbled. If there is a network failure, the track will be stored for later
scrobbling when a connection is reestablished. If *NOW-PLAYING-P* is set, also
set the user's now playing status."

scrobbler-init
  "Ensure needed variables are set, restore the cache if present and restore
or acquire a session key for scrobbling."

scrobbler-loop
  "Loop indefinitely, scrobbling as many songs as possible unless the network
is unavailable. Then sleep until at least *SCROBBLE-COUNT* songs are queued."

cache-contents
  "Get a copy of the contents of the *SCROBBLE-CACHE*."

** Usage

It is recommended to simply mirror the shuffletron plugin linked above.

You should set *song-time-fn* and *song-info-fn* so that the *last-seek* and
*song-info* variables can be updated with the current track position and
metadata, respectively. Then you can have hooks in your application to call
maybe-queue-scrobble when a song ends, update-song-info when a song begins,
and, if applicable, update-last-seek after a seek finishes and update-skipped
after skipping the track.

Finally, you should fire off a thread to call scrobbler-init and scrobbler-loop
which will do the work of creating or restoring the session key and cache and
then scrobbling tracks when possible.


